package g_oop2;

public abstract class SampleAbstractParent {

	//추상클래스와 추상메서드
	//추상메서드 : 내용이 존재하지 않는 메서드, 선언만 해주고 내용이 없음, 일반적인 메서드와 다름
	//추상메서드 : 선언부만 있고 구현부는 없는 메서드 위에와 똑같은 말
	
	void method(){ //일반적인 메서드
		
	}
	
	abstract void abstractMethod(); //추상메서드임 선언부 뒤에 중괄호(블럭)가 없고 세미콜론으로 그냥 끝남
	//추상메서드는 얘가 추상메서드인걸 알려주기 위해 앞에다가 제어자인 abstract를 붙여줌
	//추상메서드를 하나라도 가지려면 추상 클래스여야함
	//클래스에도 앞에 abstract가 붙음
	//내용이 없는 메서드를 추상메서드라고 하고 그러한 추상메서드를 하나라도 가지고 있는 클래스를 추상 클래스라고 함
	//추상 메서드는 객체 생성해서 사용할 수 가 없음
	//메서드에 내용이 없기 때문에 호출이 불가능
	//추상메서드는 부모 클래스의 역할을 함
	//추상클래스의 역할은 부모 클래스의 역할을 하기 위해 만들고 사용함
	//추상클래스를 만들어야 하는 이유는 클래스들 간에 공통된 내용이 있긴 하나
	//메서드에 내용이 조금씩 다를 때 사용함
	//요약하면 각 클래스 마다 메서드의 이름은 같은데 내용이 약간 씩 다를 때
	//추상클래스를 사용함
	//그렇기 때문에 똑같은 이름의 메서드를 추상 클래스에서 만들고 내용이 없기 때문에
	//다른 클래스에서 내용을 변경해서 같은 이름의 메서드를 사용할 수 있게 됨
}

class SampleAbstractChild extends SampleAbstractParent{

	@Override
	void abstractMethod() {
		
	}

	//상속 받으면 컴파일 에러가 발생함
	//상속을 받으면 부모 클래스의 내용이 자식 클래스 것이 되는데
	//현재 SampleAbstractParent에 추상 메서드가 있기 때문에 컴파일 에러가 발생
	//여기서 두 가지 방법이 있는데 똑같이 추상 클래스로 만들거나 아니면 추상 메서드에 내용을 만들어주면됨
	//ctrl+1 눌러서 메서드 생성하면됨
	//그렇게 하면 컴파일 에러 없어지고 추상 메서드를 Override해서 불러옴
}
