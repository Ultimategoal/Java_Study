package e_oop;

public class VariableInit {

	//명시적 초기화
	int var = 10;
	static int classVar = 20;
	
	//초기화 블럭
	{
		var = 30;
	}
	
	static{
		classVar = 40; //classVar를 초기화하고 싶으면 이렇게 static 붙여서 하면 됨
	}
	//초기화를 하고 싶은데 여러 줄이 필요할 때 초기화 블럭을 사용
	
	/*
	 * 생성자
	 * - 클래스와 같은 이름의 메서드
	 * - 인스턴스 변수를 초기화하기 위해 사용한다.
	 * - 클래스에 생성자는 반드시 하나 이상 존재해야 한다.
	 * - 직접 선언해주지 않으면 컴파일러가 기본 생성자를 만들어준다.
	 * - 생성자는 리턴타입이 없다.
	 */
	
	VariableInit(){
		var = 50;
		
		//생성자 사용 이유(왜 생성자를 이용해서 초기화 하는건지)
		//초기화에 여러줄의 코드가 필요할 때
		//초기화에 파라미터가 필요할 때
	}
	
	public static void main(String[] args) {
		Init i = new Init();
		i.a = 10;
		i.b = 20;
		i.c = 30;
		
		Init i2 = new Init();
		i2.a = 40;
		i2.b = 50;
		i2.c = 60;
		
		Init i3 = new Init(70, 80, 90); //위에 애들보다 더 간편함
		//코드를 많이 써야해서 불편함 그래서 Init클래스에 생성자를 만들고 파라미터를 만듬
		
		
	}
}

class Init{
	int a; //<인스턴스 변수
	int b;
	int c;
	
	Init(int a, int b, int c){
		this.a = a;
		this.b = b;
		this.c = c;
		//this : 인스턴스 변수와 지역변수의 이름이 같을 때 둘을 구분하기 위해 사용한다.
	}
	
	//오버로딩 : 같은 이름의 메서드를 여러개 정의하는 것
	//어떻게 구분하냐면 파라미터의 존재 유무로 구분함 이름이 같기 때문에
	//그래서 오버로딩 하려면 파라미터가 달라야 한다.
	Init(){
//		a = 10;
//		b = 20;
//		c = 30; //이렇게 할 수도 있지만 보통은 이렇게 안하고 아래 처럼 함
		this(10, 20, 30); //생성자의 첫 줄에서만 사용할 수 있다.
		//this 뒤에 괄호가 붙으면 생성자를 호출함
		//this() : 생성자에서 다른 생성자를 호출할 때 사용한다.
		//간결한 코드 작성을 위해 사용
		
	}
	
	//파라미터가 없는 생성자를 따로 만들어줬기 때문에 위에 i2 컴파일 에러 없어짐
}